plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.7'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
}

group = 'com.guide'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

jacoco {
	toolVersion = "0.8.10"
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	//implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

	implementation 'org.apache.poi:poi:5.2.3' //엑셀 불러오기용. 기존 데이터 저장 후 삭제할 예정.
	implementation 'org.apache.poi:poi-ooxml:5.2.3' //엑셀 불러오기용2

	implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'com.google.code.gson:gson:2.10.1' // json -> 객체 변환
	implementation 'javax.xml.bind:jaxb-api:2.3.0'  // base64 encoding시 필요
	// 참고 https://www.inflearn.com/questions/327430/jaxb-%EC%A7%88%EB%AC%B8%EC%9D%B4-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4
	implementation 'io.jsonwebtoken:jjwt:0.9.1' // jjwt(Java Json Web Token) 오픈소스 라이브러리
	implementation 'net.rakugakibox.util:yaml-resource-bundle:1.1'//다국어 설정 관련
	implementation 'org.springframework.boot:spring-boot-starter-data-redis' //redis
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

}

tasks.named('bootBuildImage') {
	builder = 'paketobuildpacks/builder-jammy-base:latest'
}

clean {
	delete file('src/main/generated')
}


tasks.named('test'){
	useJUnitPlatform()

	jacoco{}
	finalizedBy(tasks.jacocoTestReport) //test 이후에 동작하도록 설정
}

//테스트 리포트 발행을 위해 사용
tasks.jacocoTestReport{
	dependsOn test
	reports{
		xml.required.set(true)
		html.required.set(true)
	}

	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it,
					exclude: [   "**/*Config*",
								 "**/*Dto*",
								 "**/*Request*",
								 "**/*Response*",
								 "**/*Exception*"
					])
		}))
	}

	finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification{
	violationRules{
		rule{
			enabled= true
			element='CLASS'


		limit{
			counter='LINE'
			value='COVEREDRATIO'
			minimum = 0.0
		}

		excludes = [
				"**.*Config*",
				"**.*Dto*",
				"**.*Request*",
				"**.*Response*",
				"**.*Exception*",
				"*.test.*"
		]
		}
	}

}
